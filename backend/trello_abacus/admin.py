from datetime import timezone, timedelta
from django.contrib import admin
from django.utils.html import format_html, mark_safe
from django.urls import reverse
from django.http import HttpResponse
from .models import TrelloBoard, AbacusLog
import requests
import csv
import openpyxl
from io import BytesIO

# –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–ª–ª–æ –æ—Ç –°–∞—à–∏
TRELLO_API_KEY = "ea5b03ece4ac7fa0b2e979d6a474a9fa"
TRELLO_API_TOKEN = "ATTAcafce86412b8b74e0e2f61adf06fe674bbc60af332ae90a81300a71d4443b44949004115"
TRELLO_BOARD_ID = "cnjWPZl4"

class TrelloBoardAdmin(admin.ModelAdmin):
    list_display = ("name", "board_id", "preview_iframe", "trello_actions", "sync_status", "last_sync")
    search_fields = ("name", "board_id")
    list_filter = ("last_sync",)
    actions = ["sync_with_trello", "export_to_csv", "export_to_excel"]
    readonly_fields = ("board_id", "last_sync", "trello_actions", "preview_iframe")
    list_per_page = 20

    class Media:
        css = {
            'all': (
                'https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css',
                'admin/css/trello_admin.css',
            )
        }
        js = (
            'https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js',
        )

    def preview_iframe(self, obj):
        """–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å–∫–∏"""
        if not obj.board_id:
            return "-"
        return format_html(
            '<iframe src="https://trello.com/b/{}.html" width="300" height="200" '
            'style="border:none; margin:0; padding:0;"></iframe>',
            obj.board_id
        )
    preview_iframe.short_description = "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"

    def trello_actions(self, obj):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        buttons = [
            ("üîç –û—Ç–∫—Ä—ã—Ç—å", f"https://trello.com/b/{obj.board_id}", "btn-primary"),
            ("‚úö –ö–∞—Ä—Ç–æ—á–∫–∞", f"https://trello.com/b/{obj.board_id}/add", "btn-success"),
            ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", f"https://trello.com/b/{obj.board_id}/edit", "btn-secondary"),
            ("üìã JSON", f"https://trello.com/b/{obj.board_id}.json", "btn-info"),
        ]
        
        return format_html(" ".join(
            f'<a href="{url}" target="_blank" class="btn btn-sm {cls}">{text}</a>'
            for text, url, cls in buttons
        ))
    trello_actions.short_description = "–î–µ–π—Å—Ç–≤–∏—è"

    def sync_status(self, obj):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ API"""
        try:
            response = requests.get(
                f"https://api.trello.com/1/boards/{obj.board_id}",
                params={"key": TRELLO_API_KEY, "token": TRELLO_API_TOKEN},
                timeout=5
            )
            
            if response.status_code == 200:
                data = response.json()
                return format_html(
                    '<span class="badge bg-success">–ê–∫—Ç–∏–≤–Ω–∞</span><br>'
                    '<small>–ö–∞—Ä—Ç–æ—á–µ–∫: {}</small>',
                    data["cards"]
                )
            return format_html('<span class="badge bg-danger">–û—à–∏–±–∫–∞: {}</span>', response.status_code)
        except Exception as e:
            return format_html('<span class="badge bg-warning text-dark">{}</span>', str(e))
    sync_status.short_description = "–°—Ç–∞—Ç—É—Å"

    @admin.action(description="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Trello")
    def sync_with_trello(self, request, queryset):
        """–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Trello"""
        for board in queryset:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏ —á–µ—Ä–µ–∑ API
                response = requests.get(
                    f"https://api.trello.com/1/boards/{board.board_id}",
                    params={
                        "key": TRELLO_API_KEY,
                        "token": TRELLO_API_TOKEN,
                        "fields": "name,desc,url",
                        "lists": "open",
                        "cards": "open"
                    },
                    timeout=10
                )
                
                if response.status_code == 200:
                    data = response.json()
                    board.name = data.get("name", board.name)
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ
                    board.last_sync = timezone.now()
                    board.save()
                    
            except Exception as e:
                self.message_user(request, f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å–∫–∏ {board}: {str(e)}", level="error")
        
        self.message_user(request, f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {queryset.count()} –¥–æ—Å–æ–∫")

    @admin.action(description="–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV")
    def export_to_csv(self, request, queryset):
        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'] = 'attachment; filename="trello_boards.csv"'
        
        writer = csv.writer(response)
        writer.writerow(["–ù–∞–∑–≤–∞–Ω–∏–µ", "ID –¥–æ—Å–∫–∏", "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", "URL"])
        
        for board in queryset:
            writer.writerow([
                board.name,
                board.board_id,
                board.last_sync.strftime("%Y-%m-%d %H:%M") if board.last_sync else "",
                f"https://trello.com/b/{board.board_id}"
            ])
        
        return response

    @admin.action(description="–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
    def export_to_excel(self, request, queryset):
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "–î–æ—Å–∫–∏ Trello"
        
        headers = ["–ù–∞–∑–≤–∞–Ω–∏–µ", "ID –¥–æ—Å–∫–∏", "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", "URL"]
        ws.append(headers)
        
        for board in queryset:
            ws.append([
                board.name,
                board.board_id,
                board.last_sync.strftime("%Y-%m-%d %H:%M") if board.last_sync else "",
                f"https://trello.com/b/{board.board_id}"
            ])
        
        buffer = BytesIO()
        wb.save(buffer)
        buffer.seek(0)
        
        response = HttpResponse(
            buffer.getvalue(),
            content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
        response['Content-Disposition'] = 'attachment; filename="trello_boards.xlsx"'
        return response

class AbacusLogAdmin(admin.ModelAdmin):
    list_display = ("task", "created_at", "result_preview", "duration")
    search_fields = ("task", "result")
    list_filter = ("created_at",)
    readonly_fields = ("created_at", "task", "full_result")
    date_hierarchy = "created_at"
    list_per_page = 50
    actions = ["export_logs_to_csv", "export_logs_to_excel"]

    fieldsets = (
        (None, {
            "fields": ("task", "created_at")
        }),
        ("–†–µ–∑—É–ª—å—Ç–∞—Ç", {
            "fields": ("full_result",),
            "classes": ("collapse",)
        }),
    )

    def result_preview(self, obj):
        return obj.result[:100] + "..." if len(obj.result) > 100 else obj.result
    result_preview.short_description = "–†–µ–∑—É–ª—å—Ç–∞—Ç"

    def full_result(self, obj):
        return mark_safe(f"<pre style='white-space: pre-wrap;'>{obj.result}</pre>")
    full_result.short_description = "–ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"

    def duration(self, obj):
        if not hasattr(obj, "created_at"):
            return "-"
        
        delta = timezone.now() - obj.created_at
        if delta.days > 30:
            return f"{delta.days//30} –º–µ—Å. –Ω–∞–∑–∞–¥"
        if delta.days > 0:
            return f"{delta.days} –¥. –Ω–∞–∑–∞–¥"
        if delta.seconds > 3600:
            return f"{delta.seconds//3600} —á. –Ω–∞–∑–∞–¥"
        return f"{delta.seconds//60} –º–∏–Ω. –Ω–∞–∑–∞–¥"
    duration.short_description = "–ö–æ–≥–¥–∞"

    @admin.action(description="–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ CSV")
    def export_logs_to_csv(self, request, queryset):
        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'] = 'attachment; filename="abacus_logs.csv"'
        
        writer = csv.writer(response)
        writer.writerow(["–ó–∞–¥–∞—á–∞", "–†–µ–∑—É–ª—å—Ç–∞—Ç", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"])
        
        for log in queryset:
            writer.writerow([
                log.task,
                log.result[:500],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                log.created_at.strftime("%Y-%m-%d %H:%M")
            ])
        
        return response

    @admin.action(description="–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ Excel")
    def export_logs_to_excel(self, request, queryset):
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "–õ–æ–≥–∏ Abacus"
        
        headers = ["–ó–∞–¥–∞—á–∞", "–†–µ–∑—É–ª—å—Ç–∞—Ç", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"]
        ws.append(headers)
        
        for log in queryset:
            ws.append([
                log.task,
                log.result[:500],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                log.created_at.strftime("%Y-%m-%d %H:%M")
            ])
        
        buffer = BytesIO()
        wb.save(buffer)
        buffer.seek(0)
        
        response = HttpResponse(
            buffer.getvalue(),
            content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
        response['Content-Disposition'] = 'attachment; filename="abacus_logs.xlsx"'
        return response

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –≤–∞—à–µ–π —Ä–µ–∞–ª—å–Ω–æ–π –¥–æ—Å–∫–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
try:
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –≤–∞—à—É –¥–æ—Å–∫—É
    board, created = TrelloBoard.objects.get_or_create(
        board_id=TRELLO_BOARD_ID,
        defaults={
            'name': '–û—Å–Ω–æ–≤–Ω–∞—è –¥–æ—Å–∫–∞ VELES-IT',
            'last_sync': timezone.now()
        }
    )
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")

admin.site.register(TrelloBoard, TrelloBoardAdmin)
admin.site.register(AbacusLog, AbacusLogAdmin)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∫–∏
admin.site.site_header = "VELES-IT Admin"
admin.site.site_title = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å VELES-IT"
admin.site.index_title = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º"
admin.site.empty_value_display = "-–ø—É—Å—Ç–æ-"